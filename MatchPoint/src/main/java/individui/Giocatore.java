/**
 * Il package individui contiene la definizione delle classi relative agli individui.
 */
package individui;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;

import components.Campo;
import dataBase.DataBase;

//--------------------------------------------------------
//Code generated by Papyrus Java
//--------------------------------------------------------

/**
 * Classe che rappresenta un giocatore nel sistema.
 * Estende la classe Utente e aggiunge attributi e funzionalità specifiche.
 */
public class Giocatore extends Utente {

    public Campo[] campo;

    /**
     * Costruttore di default per la classe Giocatore.
     */
    public Giocatore() {
        super();
    }

    /**
     * Metodo per registrare un nuovo giocatore nel sistema.
     *
     * @param conn        La connessione al database.
     * @param nome        Il nome del giocatore.
     * @param cognome     Il cognome del giocatore.
     * @param dataNascita La data di nascita del giocatore in formato "yyyy-MM-dd".
     * @param email       L'email del giocatore.
     * @param username    Lo username del giocatore.
     * @param password    La password del giocatore.
     * @param nomeSquadra Il nome della squadra del giocatore.
     * @return 1 se la registrazione ha successo, -3 se lo username è già in uso, -4 se l'email è già in uso.
     */
    public static int registrazione(Connection conn, String nome, String cognome, String dataNascita, String email, String username,
                                     String password, String nomeSquadra) {
        int eta;

        // Calcolo dell'età basato sulla data di nascita
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate nascita = LocalDate.parse(dataNascita, formatter);
        LocalDate oggi = LocalDate.now();
        Period periodo = Period.between(nascita, oggi);
        eta = periodo.getYears();

        // Query per verificare se lo username o l'email esistono già
        String sqlUsername = "SELECT Password FROM Gestore WHERE Username ='" + username + "' UNION SELECT Password FROM Giocatore WHERE Username ='" + username + "'";
        String sqlEmail = "SELECT Password FROM Gestore WHERE Email ='" + email + "' UNION SELECT Password FROM Giocatore WHERE Email ='" + email + "'";
        String risUsername = "";
        String risEmail = "";

        try {
            risUsername = DataBase.eseguiSelect(conn, sqlUsername); // Controllo username
            risEmail = DataBase.eseguiSelect(conn, sqlEmail);       // Controllo email
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Gestione dei controlli
        if (!risUsername.equals("")) {
            return -3; // Username già in uso
        } 
        if (!risEmail.equals("")) {
            return -4; // Email già in uso
        }

        // Se username ed email non esistono, registra il nuovo giocatore
        try {
            DataBase.insert(conn, nome, cognome, dataNascita, eta, email, username, password, nomeSquadra);
        } catch (SQLException e) {
            e.printStackTrace();
            return -1; // Errore generico
        }
        return 1; // Registrazione avvenuta con successo
    }
}
